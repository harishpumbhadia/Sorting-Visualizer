[{"D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\index.js":"1","D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\SortingVisualizer\\SortingVIsualizer.jsx":"2","D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\store.js":"3","D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\Reducers\\index.js":"4","D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\Reducers\\isRunning\\index.js":"5","D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\Reducers\\sortingAlgorithm\\index.js":"6","D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\SortingVisualizer\\SortingVIsualizer.js":"7","D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\Algorithm\\QuickSort.js":"8","D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\Algorithm\\MergeSort.js":"9","D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\Algorithm\\BubbleSort.js":"10","D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\Algorithm\\HeapSort.js":"11"},{"size":631,"mtime":1612175398149,"results":"12","hashOfConfig":"13"},{"size":18046,"mtime":1610840191018,"results":"14","hashOfConfig":"13"},{"size":204,"mtime":1610580287644,"results":"15","hashOfConfig":"13"},{"size":221,"mtime":1610837436267,"results":"16","hashOfConfig":"13"},{"size":322,"mtime":1610580480342,"results":"17","hashOfConfig":"13"},{"size":338,"mtime":1610600630965,"results":"18","hashOfConfig":"13"},{"size":703,"mtime":1610837463238,"results":"19","hashOfConfig":"13"},{"size":1718,"mtime":1610697545774,"results":"20","hashOfConfig":"13"},{"size":2872,"mtime":1610697546145,"results":"21","hashOfConfig":"13"},{"size":875,"mtime":1610697606210,"results":"22","hashOfConfig":"13"},{"size":1906,"mtime":1610697546250,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"dgr4ac",{"filePath":"27","messages":"28","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\index.js",[],["48","49"],"D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\SortingVisualizer\\SortingVIsualizer.jsx",["50","51","52","53","54","55","56","57","58","59","60","61","62"],"import React, { Component } from 'react';\r\nimport * as bubbleSort from '../Algorithm/BubbleSort.js'\r\nimport * as quickSort from '../Algorithm/QuickSort.js';\r\nimport * as mergeSort from '../Algorithm/MergeSort';\r\nimport * as heapSort from '../Algorithm/HeapSort';\r\n\r\nconst ARRAY_ANIMATION_SPEED = 20;\r\nconst TOTAL_BARS = 185;\r\nconst MIN_TOTAL_BARS = 15;\r\nconst ARRAY_COLOR_BEFORE_SORTING = 'rgb(99, 223, 210)';\r\nconst ARRAY_COLOR_AFTER_SORTING = 'rgb(149, 233, 142)';\r\nconst ARRAY_COLOR_WHILE_SORTING = 'rgb(172, 38, 15)';\r\n\r\nclass SortingVIsualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // Must initialize state first\r\n        this.state = {\r\n            isclicked:false,\r\n            array: []  ,\r\n            width_value: \"\",\r\n            color: \"\",\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.onLoadArray();\r\n    }\r\n    handleClick(sortingAlgorithm) {\r\n        const { updateAlgorithm } = this.props;\r\n        updateAlgorithm(sortingAlgorithm)    \r\n        \r\n    }\r\n    \r\n    render() { \r\n        const  array = this.state.array;\r\n         const {\r\n            isRunning,\r\n            sortingAlgorithm,\r\n        } = this.props;\r\n\r\n        const cursor = isRunning ? \"auto\" : \"pointer\";\r\n        const color = isRunning ? \"rgba(214, 29, 29, 0.8)\" : \"white\";\r\n        return (\r\n            <>\r\n                <div className = \"navBar\">\r\n                \r\n                        <li><button\r\n                             style={{color: color, cursor: cursor}}\r\n                            className=\"generateNewArrayButton\"\r\n                            onClick={!isRunning ? this.randonNumberGenerator.bind(this) : null}>Generate new Array</button></li>\r\n                        <li style={{color: color}}class=\"text\">Change array size</li>\r\n                        \r\n                        <li>\r\n                            <input type=\"range\" min=\"1\" max=\"100\" id=\"ArrayRange\" className=\"slider\"\r\n                                style={{background: color, cursor: cursor}}\r\n                                disabled={isRunning}\r\n                                value={ this.state.value}   \r\n                                onChange={this.handleChange.bind(this)}    \r\n                            />\r\n                        </li> \r\n                    <button\r\n                        className={sortingAlgorithm === \"quickSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\r\n                        onClick={!isRunning ? () =>this.handleClick(\"quickSort\"):null}>\r\n                        Quick Sort\r\n                    </button>\r\n                    \r\n                    <button\r\n                        className={sortingAlgorithm === \"mergeSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\r\n                        onClick={!isRunning ? () => this.handleClick(\"mergeSort\"):null}>\r\n                        Merge Sort\r\n                    </button>\r\n                    <button\r\n                        className={sortingAlgorithm === \"bubbleSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\r\n                        onClick={!isRunning ? () => this.handleClick(\"bubbleSort\"):null}>\r\n                        Bubble Sort\r\n                    </button>\r\n                    <button\r\n                        className={sortingAlgorithm === \"heapSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\r\n                        onClick={!isRunning ? () => this.handleClick(\"heapSort\"):null}>\r\n                            Heap Sort\r\n                    </button>\r\n                        {\r\n                           \r\n                           sortingAlgorithm ?\r\n                                <button\r\n                                id=\"sort\"\r\n                               // disabled={ this.state.isclicked}\r\n                                    //stle={{color: color, cursor: cursor}}\r\n                                    className='algorithmButton'\r\n                                     onClick={sortingAlgorithm === 'bubbleSort' ? this.bubbleSort.bind(this) : sortingAlgorithm ==='quickSort'? this.quickSort.bind(this):sortingAlgorithm === 'heapSort' ? this.heapSort.bind(this): sortingAlgorithm === 'mergeSort'? this.mergeSort.bind(this): null}\r\n                                   // onclick={ this.bubbleSort.bind(this)}\r\n                                >\r\n                                Sort!\r\n                                     \r\n                    </button>\r\n                                : null\r\n                       }\r\n                </div>\r\n                <div class=\"Array-container\">   \r\n                    {\r\n                        array.map((value, id) => (\r\n                        <div class=\"Array-bar\"\r\n                            key={id}\r\n                            style={{\r\n                                height: `${value}px`,\r\n                                backgroundColor: `${this.state.color}`,\r\n                                width: `${this.state.width_value}px`\r\n                            }}\r\n                            \r\n                        >\r\n                        </div>\r\n                    ))}    \r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n    \r\n    handleCurrentAlgorithm() {\r\n        const currentAlgorithm = document.getElementById('currentAlgorithm').value;\r\n        if (currentAlgorithm === 'merge sort') {\r\n            this.mergeSort();\r\n        }\r\n    }\r\n    \r\n    \r\n    handleChange(event) {\r\n        const array = [];\r\n        const color = ARRAY_COLOR_BEFORE_SORTING;\r\n        this.setState({ color });\r\n\r\n        if (event.target.value >= 0 && event.target.value <= 10)\r\n            this.state.width_value = 30;\r\n        else if (event.target.value > 10 && event.target.value <= 20)\r\n            this.state.width_value = 22;\r\n        else if (event.target.value > 20 && event.target.value <= 30)\r\n            this.state.width_value = 17;\r\n        else if (event.target.value > 30 && event.target.value <= 40)\r\n            this.state.width_value = 12;\r\n        else if (event.target.value > 40 && event.target.value <= 50)\r\n            this.state.width_value = 9;\r\n        else if (event.target.value > 50 && event.target.value <= 60)\r\n            this.state.width_value = 7;\r\n        else if (event.target.value > 60 && event.target.value <= 70)\r\n            this.state.width_value = 5;\r\n        else if (event.target.value > 70 && event.target.value <= 80)\r\n            this.state.width_value = 4;\r\n        else \r\n            this.state.width_value = 3;\r\n   \r\n        \r\n        const doubleMultipler = event.target.value * 2;\r\n        for (let index = 0; index < doubleMultipler; index++) {\r\n            if (doubleMultipler < TOTAL_BARS) {\r\n                if (doubleMultipler < MIN_TOTAL_BARS) {\r\n                    this.state.width_value = 30;\r\n                    this.setState({ array });\r\n                    return this.randonNumberGenerator(MIN_TOTAL_BARS)\r\n                }\r\n                else\r\n                    array.push(randomIntFromInterval(5, 500));\r\n            }\r\n            else {\r\n                this.state.width_value = 3;\r\n                this.setState({ array });\r\n                return this.randonNumberGenerator(TOTAL_BARS)\r\n            }\r\n        }\r\n        this.setState({ array });\r\n    }\r\n    \r\n   \r\n\r\n    //main bubble sort method\r\n    bubbleSort() { \r\n        const sortingButton = document.getElementById('sort');\r\n        sortingButton.disabled = true;\r\n        sortingButton.className = 'disableButton';\r\n        const animation = bubbleSort.bubbleSort(this.state.array);\r\n       const arrayBars = document.getElementsByClassName('Array-bar');\r\n        for (let i = 0; i < animation.length; i++) {\r\n            const isColorChange = i % 2 !== 1;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animation[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                    barTwoStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                }, i * ARRAY_ANIMATION_SPEED);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, barOneNewHeight,barTwoIdx,barTwoNewHeight ] = animation[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                    barOneStyle.height = `${barOneNewHeight}px`;\r\n                    barTwoStyle.height = `${barTwoNewHeight}px`;\r\n                    barOneStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                    barTwoStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                    \r\n                 },i* ARRAY_ANIMATION_SPEED );\r\n            }\r\n            if (i >= animation.length - 1) {\r\n                setTimeout(() => {\r\n                    this.setState({ color: ARRAY_COLOR_AFTER_SORTING });\r\n                    const { disableIsRunning } = this.props;\r\n                    disableIsRunning()\r\n                    sortingButton.disabled = false;\r\n                    sortingButton.className = 'algorithmButton'\r\n                }, i * ARRAY_ANIMATION_SPEED);\r\n            }\r\n        }     \r\n    }\r\n\r\n\r\n    //quick sort method starts\r\n    quickSort() {\r\n        const animation = quickSort.quickSort(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('Array-bar');\r\n        const sortingButton = document.getElementById('sort');\r\n        sortingButton.disabled = true;\r\n        sortingButton.className = 'disableButton';\r\n        for (let i = 0; i < animation.length; i++){\r\n            const arrayElementSize = animation[i].length;\r\n            if (arrayElementSize === 3) {\r\n                const [pivotBar, leftBar, rightBar] = animation[i];\r\n                const pivotBarStyle = arrayBars[pivotBar].style;\r\n                const leftBarStyle = arrayBars[leftBar].style;\r\n                const rightBarStyle = arrayBars[rightBar].style;\r\n                setTimeout(() => {\r\n                    pivotBarStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                    leftBarStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                    rightBarStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                }, i * ARRAY_ANIMATION_SPEED);\r\n            }\r\n           \r\n            else {\r\n                setTimeout(() => {\r\n                    const [leftBar, leftBarNewHeight, rightBar, rightBarNewHeight] = animation[i];\r\n                    const leftBarStyle = arrayBars[leftBar].style;\r\n                    const rightBarStyle = arrayBars[rightBar].style;\r\n                    leftBarStyle.height = `${leftBarNewHeight}px`;\r\n                    rightBarStyle.height = `${rightBarNewHeight}px`;\r\n                    leftBarStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                    rightBarStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                }, i * ARRAY_ANIMATION_SPEED);    \r\n            }\r\n            if (i >= animation.length - 1) {\r\n                setTimeout(() => {\r\n                    const { disableIsRunning } = this.props;\r\n                    disableIsRunning()\r\n                    sortingButton.disabled = false;\r\n                    sortingButton.className = 'algorithmButton'\r\n                    this.setState({ color: ARRAY_COLOR_AFTER_SORTING });\r\n                }, i * ARRAY_ANIMATION_SPEED);\r\n            }\r\n        }\r\n    }//quick sort methods ends here.\r\n    //Merge sort method starts from here\r\n    mergeSort() {\r\n        const animation = mergeSort.mergeSort(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('Array-bar');\r\n        const sortingButton = document.getElementById('sort');\r\n        sortingButton.disabled = true;\r\n        sortingButton.className = 'disableButton';\r\n        for (let i = 0; i < animation.length;i++){\r\n            const colorChange = i % 3 ;\r\n            if (colorChange === 0) {\r\n                setTimeout(() => {\r\n                    const [leftBar, rightBar] = animation[i];\r\n                    const leftBarStyle = arrayBars[leftBar].style;\r\n                    const rightBarStyle = arrayBars[rightBar].style;\r\n                    leftBarStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                    rightBarStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                }, i * ARRAY_ANIMATION_SPEED);   \r\n            }\r\n            if (colorChange === 1) {\r\n                setTimeout(() => {\r\n                    const [leftBar, rightBar] = animation[i];\r\n                    const leftBarStyle = arrayBars[leftBar].style;\r\n                    const rightBarStyle = arrayBars[rightBar].style;\r\n                    leftBarStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                    rightBarStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                }, i * ARRAY_ANIMATION_SPEED);   \r\n            }\r\n            if (colorChange === 2)  {\r\n                setTimeout(() => {\r\n                    const [leftBar, leftBarNewHeight] = animation[i];\r\n                    const leftBarStyle = arrayBars[leftBar].style;\r\n                    leftBarStyle.height = `${leftBarNewHeight}px`;\r\n                    leftBarStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                }, i * ARRAY_ANIMATION_SPEED);    \r\n            }\r\n            if (i >= animation.length - 1) {\r\n                setTimeout(() => {\r\n                    this.setState({ color: ARRAY_COLOR_AFTER_SORTING });\r\n                    const { disableIsRunning } = this.props;\r\n                    disableIsRunning()\r\n                    sortingButton.disabled = false;\r\n                    sortingButton.className = 'algorithmButton'\r\n                }, i * ARRAY_ANIMATION_SPEED);\r\n            }\r\n        }\r\n    }\r\n\r\n    // heap sort method starts\r\n    heapSort() {\r\n        const animation = heapSort.heapSort(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('Array-bar');\r\n        const sortingButton = document.getElementById('sort');\r\n        sortingButton.disabled = true;\r\n        sortingButton.className = 'disableButton';\r\n        let count = 0;\r\n        for (let i = 0; i < animation.length; i++){\r\n            if (animation[i].length === 3) {\r\n                setTimeout(() => {\r\n                count = count + 1;\r\n                if (count % 2 === 1) {\r\n                   const [currentId, childOne, childTwo] = animation[i];\r\n                    const currentIdStyle = arrayBars[currentId].style;\r\n                    const childOneStyle = arrayBars[childOne].style;\r\n                    const childTwoStyle = arrayBars[childTwo].style;\r\n                    currentIdStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                    childOneStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                    childTwoStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                } else {\r\n                    const [currentId, childOne, childTwo] = animation[i];\r\n                    const currentIdStyle = arrayBars[currentId].style;\r\n                    const childOneStyle = arrayBars[childOne].style;\r\n                    const childTwoStyle = arrayBars[childTwo].style;\r\n                    currentIdStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                    childOneStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                    childTwoStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                }\r\n                }, i * ARRAY_ANIMATION_SPEED);\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    const [leftBar, leftBarNewHeight, rightBar, rightBarNewHeight] = animation[i];\r\n                    const leftBarStyle = arrayBars[leftBar].style;\r\n                    const rightBarStyle = arrayBars[rightBar].style;\r\n                    leftBarStyle.height = `${leftBarNewHeight}px`;\r\n                    rightBarStyle.height = `${rightBarNewHeight}px`;\r\n                    \r\n                }, i * ARRAY_ANIMATION_SPEED);   \r\n            }\r\n            if (i >= animation.length - 1) {\r\n                setTimeout(() => {\r\n                    this.setState({ color: ARRAY_COLOR_AFTER_SORTING });\r\n                    const { disableIsRunning } = this.props;\r\n                    disableIsRunning()\r\n                    sortingButton.disabled = false;\r\n                    sortingButton.className = 'algorithmButton'\r\n                }, i * ARRAY_ANIMATION_SPEED);\r\n            }\r\n        }\r\n    }\r\n    // random generator method will push 185 random numbers  to  array \r\n    // this method calls randomIntFromInterval method that originally generate random number between the range of 5 to 500 that can fit in the screen \r\n    randonNumberGenerator(arraySize) {\r\n        const array = [];\r\n        const width = this.state.width_value;\r\n        const color = ARRAY_COLOR_BEFORE_SORTING;\r\n        if (arraySize === 185 || arraySize === 15 ) {\r\n            for (let index = 0; index < arraySize; index++) {\r\n                array.push(randomIntFromInterval(5, 500));\r\n            }\r\n        } else {\r\n            for (let index = 0; index < this.state.array.length; index++) {\r\n                array.push(randomIntFromInterval(5, 500));\r\n            }\r\n        }\r\n        this.setState({ array });\r\n        this.setState({ width });\r\n        this.setState({ color });\r\n        \r\n        \r\n    }\r\n\r\n    onLoadArray() {\r\n        const array = [];\r\n        this.state.width_value = 8;    \r\n        for (let index = 0; index < 100; index++) \r\n            array.push(randomIntFromInterval(5,500));\r\n        this.setState({ array }); \r\n    }\r\n\r\n}  \r\n// Stack overflow\r\nfunction randomIntFromInterval(min, max) { // min and max included \r\n    //this.state.width = width;\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVIsualizer; ","D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\store.js",[],"D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\Reducers\\index.js",[],"D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\Reducers\\isRunning\\index.js",[],"D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\Reducers\\sortingAlgorithm\\index.js",[],"D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\SortingVisualizer\\SortingVIsualizer.js",[],"D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\Algorithm\\QuickSort.js",[],"D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\Algorithm\\MergeSort.js",[],"D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\Algorithm\\BubbleSort.js",[],"D:\\Study\\Internship\\Sorting Visualization\\sorting_visualizer\\src\\Algorithm\\HeapSort.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":132,"column":13,"nodeType":"69","endLine":132,"endColumn":23},{"ruleId":"67","severity":1,"message":"68","line":134,"column":13,"nodeType":"69","endLine":134,"endColumn":23},{"ruleId":"67","severity":1,"message":"68","line":136,"column":13,"nodeType":"69","endLine":136,"endColumn":23},{"ruleId":"67","severity":1,"message":"68","line":138,"column":13,"nodeType":"69","endLine":138,"endColumn":23},{"ruleId":"67","severity":1,"message":"68","line":140,"column":13,"nodeType":"69","endLine":140,"endColumn":23},{"ruleId":"67","severity":1,"message":"68","line":142,"column":13,"nodeType":"69","endLine":142,"endColumn":23},{"ruleId":"67","severity":1,"message":"68","line":144,"column":13,"nodeType":"69","endLine":144,"endColumn":23},{"ruleId":"67","severity":1,"message":"68","line":146,"column":13,"nodeType":"69","endLine":146,"endColumn":23},{"ruleId":"67","severity":1,"message":"68","line":148,"column":13,"nodeType":"69","endLine":148,"endColumn":23},{"ruleId":"67","severity":1,"message":"68","line":155,"column":21,"nodeType":"69","endLine":155,"endColumn":31},{"ruleId":"67","severity":1,"message":"68","line":163,"column":17,"nodeType":"69","endLine":163,"endColumn":27},{"ruleId":"70","severity":1,"message":"71","line":315,"column":28,"nodeType":"72","messageId":"73","endLine":334,"endColumn":18},{"ruleId":"67","severity":1,"message":"68","line":381,"column":9,"nodeType":"69","endLine":381,"endColumn":19},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'count', 'count', 'count'.","ArrowFunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation"]