[{"/var/www/Sorting-Visualizer/src/index.js":"1","/var/www/Sorting-Visualizer/src/SortingVisualizer/SortingVIsualizer.js":"2","/var/www/Sorting-Visualizer/src/store.js":"3","/var/www/Sorting-Visualizer/src/SortingVisualizer/SortingVIsualizer.jsx":"4","/var/www/Sorting-Visualizer/src/Algorithm/BubbleSort.js":"5","/var/www/Sorting-Visualizer/src/Algorithm/QuickSort.js":"6","/var/www/Sorting-Visualizer/src/Reducers/index.js":"7","/var/www/Sorting-Visualizer/src/Reducers/sortingAlgorithm/index.js":"8","/var/www/Sorting-Visualizer/src/Reducers/isRunning/index.js":"9","/var/www/Sorting-Visualizer/src/Algorithm/MergeSort.js":"10","/var/www/Sorting-Visualizer/src/Algorithm/HeapSort.js":"11"},{"size":631,"mtime":1629905874702,"results":"12","hashOfConfig":"13"},{"size":677,"mtime":1629905874702,"results":"14","hashOfConfig":"13"},{"size":199,"mtime":1629905874702,"results":"15","hashOfConfig":"13"},{"size":17653,"mtime":1629905874702,"results":"16","hashOfConfig":"13"},{"size":846,"mtime":1629905874698,"results":"17","hashOfConfig":"13"},{"size":1669,"mtime":1629905874698,"results":"18","hashOfConfig":"13"},{"size":212,"mtime":1629905874698,"results":"19","hashOfConfig":"13"},{"size":326,"mtime":1629905874702,"results":"20","hashOfConfig":"13"},{"size":311,"mtime":1629905874702,"results":"21","hashOfConfig":"13"},{"size":2796,"mtime":1629905874698,"results":"22","hashOfConfig":"13"},{"size":1852,"mtime":1629905874698,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1mxhcuf",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/var/www/Sorting-Visualizer/src/index.js",[],["49","50"],"/var/www/Sorting-Visualizer/src/SortingVisualizer/SortingVIsualizer.js",[],"/var/www/Sorting-Visualizer/src/store.js",[],"/var/www/Sorting-Visualizer/src/SortingVisualizer/SortingVIsualizer.jsx",["51","52","53","54","55","56","57","58","59","60","61","62","63"],"import React, { Component } from 'react';\nimport * as bubbleSort from '../Algorithm/BubbleSort.js'\nimport * as quickSort from '../Algorithm/QuickSort.js';\nimport * as mergeSort from '../Algorithm/MergeSort';\nimport * as heapSort from '../Algorithm/HeapSort';\n\nconst ARRAY_ANIMATION_SPEED = 20;\nconst TOTAL_BARS = 185;\nconst MIN_TOTAL_BARS = 15;\nconst ARRAY_COLOR_BEFORE_SORTING = 'rgb(99, 223, 210)';\nconst ARRAY_COLOR_AFTER_SORTING = 'rgb(149, 233, 142)';\nconst ARRAY_COLOR_WHILE_SORTING = 'rgb(172, 38, 15)';\n\nclass SortingVIsualizer extends Component {\n    constructor(props) {\n        super(props);\n        // Must initialize state first\n        this.state = {\n            isclicked:false,\n            array: []  ,\n            width_value: \"\",\n            color: \"\",\n        };\n    }\n    componentDidMount() {\n        this.onLoadArray();\n    }\n    handleClick(sortingAlgorithm) {\n        const { updateAlgorithm } = this.props;\n        updateAlgorithm(sortingAlgorithm)    \n        \n    }\n    \n    render() { \n        const  array = this.state.array;\n         const {\n            isRunning,\n            sortingAlgorithm,\n        } = this.props;\n\n        const cursor = isRunning ? \"auto\" : \"pointer\";\n        const color = isRunning ? \"rgba(214, 29, 29, 0.8)\" : \"white\";\n        return (\n            <>\n                <div className = \"navBar\">\n                \n                        <li><button\n                             style={{color: color, cursor: cursor}}\n                            className=\"generateNewArrayButton\"\n                            onClick={!isRunning ? this.randonNumberGenerator.bind(this) : null}>Generate new Array</button></li>\n                        <li style={{color: color}}class=\"text\">Change array size</li>\n                        \n                        <li>\n                            <input type=\"range\" min=\"1\" max=\"100\" id=\"ArrayRange\" className=\"slider\"\n                                style={{background: color, cursor: cursor}}\n                                disabled={isRunning}\n                                value={ this.state.value}   \n                                onChange={this.handleChange.bind(this)}    \n                            />\n                        </li> \n                    <button\n                        className={sortingAlgorithm === \"quickSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\n                        onClick={!isRunning ? () =>this.handleClick(\"quickSort\"):null}>\n                        Quick Sort\n                    </button>\n                    \n                    <button\n                        className={sortingAlgorithm === \"mergeSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\n                        onClick={!isRunning ? () => this.handleClick(\"mergeSort\"):null}>\n                        Merge Sort\n                    </button>\n                    <button\n                        className={sortingAlgorithm === \"bubbleSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\n                        onClick={!isRunning ? () => this.handleClick(\"bubbleSort\"):null}>\n                        Bubble Sort\n                    </button>\n                    <button\n                        className={sortingAlgorithm === \"heapSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\n                        onClick={!isRunning ? () => this.handleClick(\"heapSort\"):null}>\n                            Heap Sort\n                    </button>\n                        {\n                           \n                           sortingAlgorithm ?\n                                <button\n                                id=\"sort\"\n                               // disabled={ this.state.isclicked}\n                                    //stle={{color: color, cursor: cursor}}\n                                    className='algorithmButton'\n                                     onClick={sortingAlgorithm === 'bubbleSort' ? this.bubbleSort.bind(this) : sortingAlgorithm ==='quickSort'? this.quickSort.bind(this):sortingAlgorithm === 'heapSort' ? this.heapSort.bind(this): sortingAlgorithm === 'mergeSort'? this.mergeSort.bind(this): null}\n                                   // onclick={ this.bubbleSort.bind(this)}\n                                >\n                                Sort!\n                                     \n                    </button>\n                                : null\n                       }\n                </div>\n                <div class=\"Array-container\">   \n                    {\n                        array.map((value, id) => (\n                        <div class=\"Array-bar\"\n                            key={id}\n                            style={{\n                                height: `${value}px`,\n                                backgroundColor: `${this.state.color}`,\n                                width: `${this.state.width_value}px`\n                            }}\n                            \n                        >\n                        </div>\n                    ))}    \n                </div>\n            </>\n        );\n    }\n    \n    handleCurrentAlgorithm() {\n        const currentAlgorithm = document.getElementById('currentAlgorithm').value;\n        if (currentAlgorithm === 'merge sort') {\n            this.mergeSort();\n        }\n    }\n    \n    \n    handleChange(event) {\n        const array = [];\n        const color = ARRAY_COLOR_BEFORE_SORTING;\n        this.setState({ color });\n\n        if (event.target.value >= 0 && event.target.value <= 10)\n            this.state.width_value = 30;\n        else if (event.target.value > 10 && event.target.value <= 20)\n            this.state.width_value = 22;\n        else if (event.target.value > 20 && event.target.value <= 30)\n            this.state.width_value = 17;\n        else if (event.target.value > 30 && event.target.value <= 40)\n            this.state.width_value = 12;\n        else if (event.target.value > 40 && event.target.value <= 50)\n            this.state.width_value = 9;\n        else if (event.target.value > 50 && event.target.value <= 60)\n            this.state.width_value = 7;\n        else if (event.target.value > 60 && event.target.value <= 70)\n            this.state.width_value = 5;\n        else if (event.target.value > 70 && event.target.value <= 80)\n            this.state.width_value = 4;\n        else \n            this.state.width_value = 3;\n   \n        \n        const doubleMultipler = event.target.value * 2;\n        for (let index = 0; index < doubleMultipler; index++) {\n            if (doubleMultipler < TOTAL_BARS) {\n                if (doubleMultipler < MIN_TOTAL_BARS) {\n                    this.state.width_value = 30;\n                    this.setState({ array });\n                    return this.randonNumberGenerator(MIN_TOTAL_BARS)\n                }\n                else\n                    array.push(randomIntFromInterval(5, 500));\n            }\n            else {\n                this.state.width_value = 3;\n                this.setState({ array });\n                return this.randonNumberGenerator(TOTAL_BARS)\n            }\n        }\n        this.setState({ array });\n    }\n    \n   \n\n    //main bubble sort method\n    bubbleSort() { \n        const sortingButton = document.getElementById('sort');\n        sortingButton.disabled = true;\n        sortingButton.className = 'disableButton';\n        const animation = bubbleSort.bubbleSort(this.state.array);\n       const arrayBars = document.getElementsByClassName('Array-bar');\n        for (let i = 0; i < animation.length; i++) {\n            const isColorChange = i % 2 !== 1;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animation[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\n                    barTwoStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\n                }, i * ARRAY_ANIMATION_SPEED);\n            } else {\n                setTimeout(() => {\n                    const [barOneIdx, barOneNewHeight,barTwoIdx,barTwoNewHeight ] = animation[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    barOneStyle.height = `${barOneNewHeight}px`;\n                    barTwoStyle.height = `${barTwoNewHeight}px`;\n                    barOneStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\n                    barTwoStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\n                    \n                 },i* ARRAY_ANIMATION_SPEED );\n            }\n            if (i >= animation.length - 1) {\n                setTimeout(() => {\n                    this.setState({ color: ARRAY_COLOR_AFTER_SORTING });\n                    const { disableIsRunning } = this.props;\n                    disableIsRunning()\n                    sortingButton.disabled = false;\n                    sortingButton.className = 'algorithmButton'\n                }, i * ARRAY_ANIMATION_SPEED);\n            }\n        }     \n    }\n\n\n    //quick sort method starts\n    quickSort() {\n        const animation = quickSort.quickSort(this.state.array);\n        const arrayBars = document.getElementsByClassName('Array-bar');\n        const sortingButton = document.getElementById('sort');\n        sortingButton.disabled = true;\n        sortingButton.className = 'disableButton';\n        for (let i = 0; i < animation.length; i++){\n            const arrayElementSize = animation[i].length;\n            if (arrayElementSize === 3) {\n                const [pivotBar, leftBar, rightBar] = animation[i];\n                const pivotBarStyle = arrayBars[pivotBar].style;\n                const leftBarStyle = arrayBars[leftBar].style;\n                const rightBarStyle = arrayBars[rightBar].style;\n                setTimeout(() => {\n                    pivotBarStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\n                    leftBarStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\n                    rightBarStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\n                }, i * ARRAY_ANIMATION_SPEED);\n            }\n           \n            else {\n                setTimeout(() => {\n                    const [leftBar, leftBarNewHeight, rightBar, rightBarNewHeight] = animation[i];\n                    const leftBarStyle = arrayBars[leftBar].style;\n                    const rightBarStyle = arrayBars[rightBar].style;\n                    leftBarStyle.height = `${leftBarNewHeight}px`;\n                    rightBarStyle.height = `${rightBarNewHeight}px`;\n                    leftBarStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\n                    rightBarStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\n                }, i * ARRAY_ANIMATION_SPEED);    \n            }\n            if (i >= animation.length - 1) {\n                setTimeout(() => {\n                    const { disableIsRunning } = this.props;\n                    disableIsRunning()\n                    sortingButton.disabled = false;\n                    sortingButton.className = 'algorithmButton'\n                    this.setState({ color: ARRAY_COLOR_AFTER_SORTING });\n                }, i * ARRAY_ANIMATION_SPEED);\n            }\n        }\n    }//quick sort methods ends here.\n    //Merge sort method starts from here\n    mergeSort() {\n        const animation = mergeSort.mergeSort(this.state.array);\n        const arrayBars = document.getElementsByClassName('Array-bar');\n        const sortingButton = document.getElementById('sort');\n        sortingButton.disabled = true;\n        sortingButton.className = 'disableButton';\n        for (let i = 0; i < animation.length;i++){\n            const colorChange = i % 3 ;\n            if (colorChange === 0) {\n                setTimeout(() => {\n                    const [leftBar, rightBar] = animation[i];\n                    const leftBarStyle = arrayBars[leftBar].style;\n                    const rightBarStyle = arrayBars[rightBar].style;\n                    leftBarStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\n                    rightBarStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\n                }, i * ARRAY_ANIMATION_SPEED);   \n            }\n            if (colorChange === 1) {\n                setTimeout(() => {\n                    const [leftBar, rightBar] = animation[i];\n                    const leftBarStyle = arrayBars[leftBar].style;\n                    const rightBarStyle = arrayBars[rightBar].style;\n                    leftBarStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\n                    rightBarStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\n                }, i * ARRAY_ANIMATION_SPEED);   \n            }\n            if (colorChange === 2)  {\n                setTimeout(() => {\n                    const [leftBar, leftBarNewHeight] = animation[i];\n                    const leftBarStyle = arrayBars[leftBar].style;\n                    leftBarStyle.height = `${leftBarNewHeight}px`;\n                    leftBarStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\n                }, i * ARRAY_ANIMATION_SPEED);    \n            }\n            if (i >= animation.length - 1) {\n                setTimeout(() => {\n                    this.setState({ color: ARRAY_COLOR_AFTER_SORTING });\n                    const { disableIsRunning } = this.props;\n                    disableIsRunning()\n                    sortingButton.disabled = false;\n                    sortingButton.className = 'algorithmButton'\n                }, i * ARRAY_ANIMATION_SPEED);\n            }\n        }\n    }\n\n    // heap sort method starts\n    heapSort() {\n        const animation = heapSort.heapSort(this.state.array);\n        const arrayBars = document.getElementsByClassName('Array-bar');\n        const sortingButton = document.getElementById('sort');\n        sortingButton.disabled = true;\n        sortingButton.className = 'disableButton';\n        let count = 0;\n        for (let i = 0; i < animation.length; i++){\n            if (animation[i].length === 3) {\n                setTimeout(() => {\n                count = count + 1;\n                if (count % 2 === 1) {\n                   const [currentId, childOne, childTwo] = animation[i];\n                    const currentIdStyle = arrayBars[currentId].style;\n                    const childOneStyle = arrayBars[childOne].style;\n                    const childTwoStyle = arrayBars[childTwo].style;\n                    currentIdStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\n                    childOneStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\n                    childTwoStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\n                } else {\n                    const [currentId, childOne, childTwo] = animation[i];\n                    const currentIdStyle = arrayBars[currentId].style;\n                    const childOneStyle = arrayBars[childOne].style;\n                    const childTwoStyle = arrayBars[childTwo].style;\n                    currentIdStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\n                    childOneStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\n                    childTwoStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\n                }\n                }, i * ARRAY_ANIMATION_SPEED);\n            }\n            else {\n                setTimeout(() => {\n                    const [leftBar, leftBarNewHeight, rightBar, rightBarNewHeight] = animation[i];\n                    const leftBarStyle = arrayBars[leftBar].style;\n                    const rightBarStyle = arrayBars[rightBar].style;\n                    leftBarStyle.height = `${leftBarNewHeight}px`;\n                    rightBarStyle.height = `${rightBarNewHeight}px`;\n                    \n                }, i * ARRAY_ANIMATION_SPEED);   \n            }\n            if (i >= animation.length - 1) {\n                setTimeout(() => {\n                    this.setState({ color: ARRAY_COLOR_AFTER_SORTING });\n                    const { disableIsRunning } = this.props;\n                    disableIsRunning()\n                    sortingButton.disabled = false;\n                    sortingButton.className = 'algorithmButton'\n                }, i * ARRAY_ANIMATION_SPEED);\n            }\n        }\n    }\n    // random generator method will push 185 random numbers  to  array \n    // this method calls randomIntFromInterval method that originally generate random number between the range of 5 to 500 that can fit in the screen \n    randonNumberGenerator(arraySize) {\n        const array = [];\n        const width = this.state.width_value;\n        const color = ARRAY_COLOR_BEFORE_SORTING;\n        if (arraySize === 185 || arraySize === 15 ) {\n            for (let index = 0; index < arraySize; index++) {\n                array.push(randomIntFromInterval(5, 500));\n            }\n        } else {\n            for (let index = 0; index < this.state.array.length; index++) {\n                array.push(randomIntFromInterval(5, 500));\n            }\n        }\n        this.setState({ array });\n        this.setState({ width });\n        this.setState({ color });\n        \n        \n    }\n\n    onLoadArray() {\n        const array = [];\n        this.state.width_value = 8;    \n        for (let index = 0; index < 100; index++) \n            array.push(randomIntFromInterval(5,500));\n        this.setState({ array }); \n    }\n\n}  \n// Stack overflow\nfunction randomIntFromInterval(min, max) { // min and max included \n    //this.state.width = width;\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVIsualizer; ","/var/www/Sorting-Visualizer/src/Algorithm/BubbleSort.js",[],"/var/www/Sorting-Visualizer/src/Algorithm/QuickSort.js",[],"/var/www/Sorting-Visualizer/src/Reducers/index.js",[],"/var/www/Sorting-Visualizer/src/Reducers/sortingAlgorithm/index.js",[],"/var/www/Sorting-Visualizer/src/Reducers/isRunning/index.js",[],"/var/www/Sorting-Visualizer/src/Algorithm/MergeSort.js",[],"/var/www/Sorting-Visualizer/src/Algorithm/HeapSort.js",[],["64","65"],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":132,"column":13,"nodeType":"72","endLine":132,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":134,"column":13,"nodeType":"72","endLine":134,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":136,"column":13,"nodeType":"72","endLine":136,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":138,"column":13,"nodeType":"72","endLine":138,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":140,"column":13,"nodeType":"72","endLine":140,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":142,"column":13,"nodeType":"72","endLine":142,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":144,"column":13,"nodeType":"72","endLine":144,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":146,"column":13,"nodeType":"72","endLine":146,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":148,"column":13,"nodeType":"72","endLine":148,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":155,"column":21,"nodeType":"72","endLine":155,"endColumn":31},{"ruleId":"70","severity":1,"message":"71","line":163,"column":17,"nodeType":"72","endLine":163,"endColumn":27},{"ruleId":"73","severity":1,"message":"74","line":315,"column":28,"nodeType":"75","messageId":"76","endLine":334,"endColumn":18},{"ruleId":"70","severity":1,"message":"71","line":381,"column":9,"nodeType":"72","endLine":381,"endColumn":19},{"ruleId":"66","replacedBy":"77"},{"ruleId":"68","replacedBy":"78"},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'count', 'count', 'count'.","ArrowFunctionExpression","unsafeRefs",["79"],["80"],"no-global-assign","no-unsafe-negation"]